// Copyright 2019 tsuru authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package cmd

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/olekukonko/tablewriter"
	"github.com/urfave/cli/v2"

	"github.com/tsuru/rpaas-operator/pkg/rpaas/client/autogenerated"
)

func NewCmdAutoscale() *cli.Command {
	return &cli.Command{
		Name:  "autoscale",
		Usage: "Manages autoscaling settings of an instance",
		Subcommands: []*cli.Command{
			NewCmdGetAutoscale(),
			NewCmdUpdateAutoscale(),
			NewCmdRemoveAutoscale(),
		},
	}
}

func NewCmdUpdateAutoscale() *cli.Command {
	return &cli.Command{
		Name:    "add",
		Aliases: []string{"update"},
		Usage:   "Updates the autoscaling parameters and targets of an reverse proxy instance",
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:    "service",
				Aliases: []string{"tsuru-service", "s"},
				Usage:   "the Tsuru service name",
			},
			&cli.StringFlag{
				Name:     "instance",
				Aliases:  []string{"tsuru-service-instance", "i"},
				Usage:    "the reverse proxy instance name",
				Required: true,
			},
			&cli.IntFlag{
				Name:     "min",
				Usage:    "the lower limit of replicas that can be reached",
				Required: false,
			},
			&cli.IntFlag{
				Name:     "max",
				Usage:    "the upper limit of replicas that can be reached",
				Required: true,
			},
			&cli.IntFlag{
				Name:        "cpu",
				Aliases:     []string{"cpu-utilization"},
				Usage:       "the target average CPU utilization on all replicas (in percentage format, e.g. 80 equals to 80%)",
				DefaultText: "N/A",
			},
			&cli.IntFlag{
				Name:        "memory",
				Aliases:     []string{"memory-utilization"},
				Usage:       "the target average memory utilization on all the replicas (in percentage format, e.g. 80 equals to 80%)",
				DefaultText: "N/A",
			},
			&cli.IntFlag{
				Name:        "rps",
				Aliases:     []string{"requests-per-second"},
				Usage:       "the target average of HTTP requests per seconds between replicas (e.g. 100, means 100 req/s)",
				DefaultText: "N/A",
			},
		},
		Action: runUpdateAutoscale,
	}
}

func runUpdateAutoscale(c *cli.Context) error {
	autoscale := autogenerated.Autoscale{
		MinReplicas: int32(c.Int("min")),
		MaxReplicas: int32(c.Int("max")),
		Cpu:         autogenerated.PtrInt32(int32(c.Int("cpu"))),
		Memory:      autogenerated.PtrInt32(int32(c.Int("memory"))),
		Rps:         autogenerated.PtrInt32(int32(c.Int("rps"))),
	}

	_, err := NewAutogeneratedClient(c).RpaasApi.UpdateAutoscale(c.Context, c.String("instance")).Autoscale(autoscale).Execute()
	if err != nil {
		return fmt.Errorf("could not update the autoscale on RPaaS API: %w", err)
	}

	fmt.Fprintf(c.App.Writer, "Autoscale of %s successfully updated!\n", formatInstanceName(c))
	return nil
}

func NewCmdGetAutoscale() *cli.Command {
	return &cli.Command{
		Name:  "info",
		Usage: "Shows  the autoscaling settings",
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:    "service",
				Aliases: []string{"tsuru-service", "s"},
				Usage:   "the Tsuru service name",
			},
			&cli.StringFlag{
				Name:     "instance",
				Aliases:  []string{"tsuru-service-instance", "i"},
				Usage:    "the reverse proxy instance name",
				Required: true,
			},
			&cli.BoolFlag{
				Name:  "json",
				Usage: "show as JSON instead of go template format",
				Value: false,
			},
		},
		Action: runGetAutoscale,
	}
}

func runGetAutoscale(c *cli.Context) error {
	autoscale, _, err := NewAutogeneratedClient(c).RpaasApi.GetAutoscale(c.Context, c.String("instance")).Execute()
	if err != nil {
		return fmt.Errorf("could not get autoscale from RPaaS API: %w", err)
	}

	if outputAsJSON := c.Bool("json"); outputAsJSON {
		return writeJSON(c.App.Writer, autoscale)
	}

	writeAutoscale(c.App.Writer, autoscale)
	return nil
}

func NewCmdRemoveAutoscale() *cli.Command {
	return &cli.Command{
		Name:    "remove",
		Usage:   "Removes the autoscaling parameters of instance",
		Aliases: []string{"delete"},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:    "service",
				Aliases: []string{"tsuru-service", "s"},
				Usage:   "the Tsuru service name",
			},
			&cli.StringFlag{
				Name:     "instance",
				Aliases:  []string{"tsuru-service-instance", "i"},
				Usage:    "the reverse proxy instance name",
				Required: true,
			},
		},
		Action: runRemoveAutoscale,
	}
}

func runRemoveAutoscale(c *cli.Context) error {
	_, err := NewAutogeneratedClient(c).RpaasApi.RemoveAutoscale(c.Context, c.String("instance")).Execute()
	if err != nil {
		return fmt.Errorf("could not delete the autoscale on RPaaS API: %w", err)
	}

	fmt.Fprintf(c.App.Writer, "Autoscale of %s successfully removed\n", formatInstanceName(c))
	return nil
}

func writeAutoscale(w io.Writer, autoscale *autogenerated.Autoscale) {
	if autoscale == nil {
		return
	}

	table := tablewriter.NewWriter(w)
	table.SetHeader([]string{"Replicas", "Target"})
	table.SetAutoFormatHeaders(false)
	table.SetHeaderAlignment(tablewriter.ALIGN_LEFT)
	table.SetAutoWrapText(true)
	table.SetRowLine(false)

	min := fmt.Sprintf("Min: %d", autoscale.MinReplicas)
	max := fmt.Sprintf("Max: %d", autoscale.MaxReplicas)

	cpuPercentage := "CPU: N/A"
	if autoscale.Cpu != nil {
		cpuPercentage = fmt.Sprintf("CPU: %d%%", *autoscale.Cpu)
	}

	memPercentage := "Memory: N/A"
	if autoscale.Memory != nil {
		memPercentage = fmt.Sprintf("Memory: %d%%", *autoscale.Memory)
	}

	rps := "RPS: N/A"
	if autoscale.Rps != nil {
		rps = fmt.Sprintf("RPS: %d req/s", *autoscale.Rps)
	}

	data := [][]string{
		{max, cpuPercentage},
		{min, memPercentage},
		{"", rps},
	}
	table.AppendBulk(data)
	table.Render()
}

func writeJSON(w io.Writer, v any) error {
	e := json.NewEncoder(w)
	e.SetIndent("", "\t")
	return e.Encode(v)
}
