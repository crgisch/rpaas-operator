/*
Reverse Proxy as a Service

The presented API definition (formally called as RPaaS v2 API) is a superset of [Tsuru Service API] and the [legacy RPaaS][RPaaS v1 API] (aka RPaaS v1).  Source code: [github.com/tsuru/rpaas-operator](https://github.com/tsuru/rpaas-operator.git)  [Tsuru Service API]: https://app.swaggerhub.com/apis/tsuru/tsuru-service_api [RPaaS v1 API]: https://raw.githubusercontent.com/tsuru/rpaas/master/rpaas/api.py

API version: v2
Contact: tsuru@g.globo
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package autogenerated

import (
	"encoding/json"
	"time"
)

// checks if the CertificateInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificateInfo{}

// CertificateInfo struct for CertificateInfo
type CertificateInfo struct {
	Name               *string    `json:"name,omitempty"`
	DnsNames           []string   `json:"dnsNames,omitempty"`
	PublicKeyAlgorithm *string    `json:"publicKeyAlgorithm,omitempty"`
	PublicKeyBitSize   *float32   `json:"publicKeyBitSize,omitempty"`
	ValidFrom          *time.Time `json:"validFrom,omitempty"`
	ValidUntil         *time.Time `json:"validUntil,omitempty"`
}

// NewCertificateInfo instantiates a new CertificateInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateInfo() *CertificateInfo {
	this := CertificateInfo{}
	return &this
}

// NewCertificateInfoWithDefaults instantiates a new CertificateInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateInfoWithDefaults() *CertificateInfo {
	this := CertificateInfo{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CertificateInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CertificateInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CertificateInfo) SetName(v string) {
	o.Name = &v
}

// GetDnsNames returns the DnsNames field value if set, zero value otherwise.
func (o *CertificateInfo) GetDnsNames() []string {
	if o == nil || IsNil(o.DnsNames) {
		var ret []string
		return ret
	}
	return o.DnsNames
}

// GetDnsNamesOk returns a tuple with the DnsNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateInfo) GetDnsNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.DnsNames) {
		return nil, false
	}
	return o.DnsNames, true
}

// HasDnsNames returns a boolean if a field has been set.
func (o *CertificateInfo) HasDnsNames() bool {
	if o != nil && !IsNil(o.DnsNames) {
		return true
	}

	return false
}

// SetDnsNames gets a reference to the given []string and assigns it to the DnsNames field.
func (o *CertificateInfo) SetDnsNames(v []string) {
	o.DnsNames = v
}

// GetPublicKeyAlgorithm returns the PublicKeyAlgorithm field value if set, zero value otherwise.
func (o *CertificateInfo) GetPublicKeyAlgorithm() string {
	if o == nil || IsNil(o.PublicKeyAlgorithm) {
		var ret string
		return ret
	}
	return *o.PublicKeyAlgorithm
}

// GetPublicKeyAlgorithmOk returns a tuple with the PublicKeyAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateInfo) GetPublicKeyAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.PublicKeyAlgorithm) {
		return nil, false
	}
	return o.PublicKeyAlgorithm, true
}

// HasPublicKeyAlgorithm returns a boolean if a field has been set.
func (o *CertificateInfo) HasPublicKeyAlgorithm() bool {
	if o != nil && !IsNil(o.PublicKeyAlgorithm) {
		return true
	}

	return false
}

// SetPublicKeyAlgorithm gets a reference to the given string and assigns it to the PublicKeyAlgorithm field.
func (o *CertificateInfo) SetPublicKeyAlgorithm(v string) {
	o.PublicKeyAlgorithm = &v
}

// GetPublicKeyBitSize returns the PublicKeyBitSize field value if set, zero value otherwise.
func (o *CertificateInfo) GetPublicKeyBitSize() float32 {
	if o == nil || IsNil(o.PublicKeyBitSize) {
		var ret float32
		return ret
	}
	return *o.PublicKeyBitSize
}

// GetPublicKeyBitSizeOk returns a tuple with the PublicKeyBitSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateInfo) GetPublicKeyBitSizeOk() (*float32, bool) {
	if o == nil || IsNil(o.PublicKeyBitSize) {
		return nil, false
	}
	return o.PublicKeyBitSize, true
}

// HasPublicKeyBitSize returns a boolean if a field has been set.
func (o *CertificateInfo) HasPublicKeyBitSize() bool {
	if o != nil && !IsNil(o.PublicKeyBitSize) {
		return true
	}

	return false
}

// SetPublicKeyBitSize gets a reference to the given float32 and assigns it to the PublicKeyBitSize field.
func (o *CertificateInfo) SetPublicKeyBitSize(v float32) {
	o.PublicKeyBitSize = &v
}

// GetValidFrom returns the ValidFrom field value if set, zero value otherwise.
func (o *CertificateInfo) GetValidFrom() time.Time {
	if o == nil || IsNil(o.ValidFrom) {
		var ret time.Time
		return ret
	}
	return *o.ValidFrom
}

// GetValidFromOk returns a tuple with the ValidFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateInfo) GetValidFromOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ValidFrom) {
		return nil, false
	}
	return o.ValidFrom, true
}

// HasValidFrom returns a boolean if a field has been set.
func (o *CertificateInfo) HasValidFrom() bool {
	if o != nil && !IsNil(o.ValidFrom) {
		return true
	}

	return false
}

// SetValidFrom gets a reference to the given time.Time and assigns it to the ValidFrom field.
func (o *CertificateInfo) SetValidFrom(v time.Time) {
	o.ValidFrom = &v
}

// GetValidUntil returns the ValidUntil field value if set, zero value otherwise.
func (o *CertificateInfo) GetValidUntil() time.Time {
	if o == nil || IsNil(o.ValidUntil) {
		var ret time.Time
		return ret
	}
	return *o.ValidUntil
}

// GetValidUntilOk returns a tuple with the ValidUntil field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateInfo) GetValidUntilOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ValidUntil) {
		return nil, false
	}
	return o.ValidUntil, true
}

// HasValidUntil returns a boolean if a field has been set.
func (o *CertificateInfo) HasValidUntil() bool {
	if o != nil && !IsNil(o.ValidUntil) {
		return true
	}

	return false
}

// SetValidUntil gets a reference to the given time.Time and assigns it to the ValidUntil field.
func (o *CertificateInfo) SetValidUntil(v time.Time) {
	o.ValidUntil = &v
}

func (o CertificateInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificateInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.DnsNames) {
		toSerialize["dnsNames"] = o.DnsNames
	}
	if !IsNil(o.PublicKeyAlgorithm) {
		toSerialize["publicKeyAlgorithm"] = o.PublicKeyAlgorithm
	}
	if !IsNil(o.PublicKeyBitSize) {
		toSerialize["publicKeyBitSize"] = o.PublicKeyBitSize
	}
	if !IsNil(o.ValidFrom) {
		toSerialize["validFrom"] = o.ValidFrom
	}
	if !IsNil(o.ValidUntil) {
		toSerialize["validUntil"] = o.ValidUntil
	}
	return toSerialize, nil
}

type NullableCertificateInfo struct {
	value *CertificateInfo
	isSet bool
}

func (v NullableCertificateInfo) Get() *CertificateInfo {
	return v.value
}

func (v *NullableCertificateInfo) Set(val *CertificateInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateInfo(val *CertificateInfo) *NullableCertificateInfo {
	return &NullableCertificateInfo{value: val, isSet: true}
}

func (v NullableCertificateInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
