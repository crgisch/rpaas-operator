/*
Reverse Proxy as a Service

The presented API definition (formally called as RPaaS v2 API) is a superset of [Tsuru Service API] and the [legacy RPaaS][RPaaS v1 API] (aka RPaaS v1).  Source code: [github.com/tsuru/rpaas-operator](https://github.com/tsuru/rpaas-operator.git)  [Tsuru Service API]: https://app.swaggerhub.com/apis/tsuru/tsuru-service_api [RPaaS v1 API]: https://raw.githubusercontent.com/tsuru/rpaas/master/rpaas/api.py

API version: v2
Contact: tsuru@g.globo
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package autogenerated

import (
	"encoding/json"
)

// checks if the Purge type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Purge{}

// Purge struct for Purge
type Purge struct {
	Path         *string `json:"path,omitempty"`
	PreservePath *bool   `json:"preserve_path,omitempty"`
	ExtraHeaders *string `json:"extra_headers,omitempty"`
}

// NewPurge instantiates a new Purge object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPurge() *Purge {
	this := Purge{}
	return &this
}

// NewPurgeWithDefaults instantiates a new Purge object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPurgeWithDefaults() *Purge {
	this := Purge{}
	return &this
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *Purge) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Purge) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *Purge) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *Purge) SetPath(v string) {
	o.Path = &v
}

// GetPreservePath returns the PreservePath field value if set, zero value otherwise.
func (o *Purge) GetPreservePath() bool {
	if o == nil || IsNil(o.PreservePath) {
		var ret bool
		return ret
	}
	return *o.PreservePath
}

// GetPreservePathOk returns a tuple with the PreservePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Purge) GetPreservePathOk() (*bool, bool) {
	if o == nil || IsNil(o.PreservePath) {
		return nil, false
	}
	return o.PreservePath, true
}

// HasPreservePath returns a boolean if a field has been set.
func (o *Purge) HasPreservePath() bool {
	if o != nil && !IsNil(o.PreservePath) {
		return true
	}

	return false
}

// SetPreservePath gets a reference to the given bool and assigns it to the PreservePath field.
func (o *Purge) SetPreservePath(v bool) {
	o.PreservePath = &v
}

// GetExtraHeaders returns the ExtraHeaders field value if set, zero value otherwise.
func (o *Purge) GetExtraHeaders() string {
	if o == nil || IsNil(o.ExtraHeaders) {
		var ret string
		return ret
	}
	return *o.ExtraHeaders
}

// GetExtraHeadersOk returns a tuple with the ExtraHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Purge) GetExtraHeadersOk() (*string, bool) {
	if o == nil || IsNil(o.ExtraHeaders) {
		return nil, false
	}
	return o.ExtraHeaders, true
}

// HasExtraHeaders returns a boolean if a field has been set.
func (o *Purge) HasExtraHeaders() bool {
	if o != nil && !IsNil(o.ExtraHeaders) {
		return true
	}

	return false
}

// SetExtraHeaders gets a reference to the given string and assigns it to the ExtraHeaders field.
func (o *Purge) SetExtraHeaders(v string) {
	o.ExtraHeaders = &v
}

func (o Purge) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Purge) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.PreservePath) {
		toSerialize["preserve_path"] = o.PreservePath
	}
	if !IsNil(o.ExtraHeaders) {
		toSerialize["extra_headers"] = o.ExtraHeaders
	}
	return toSerialize, nil
}

type NullablePurge struct {
	value *Purge
	isSet bool
}

func (v NullablePurge) Get() *Purge {
	return v.value
}

func (v *NullablePurge) Set(val *Purge) {
	v.value = val
	v.isSet = true
}

func (v NullablePurge) IsSet() bool {
	return v.isSet
}

func (v *NullablePurge) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePurge(val *Purge) *NullablePurge {
	return &NullablePurge{value: val, isSet: true}
}

func (v NullablePurge) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePurge) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
