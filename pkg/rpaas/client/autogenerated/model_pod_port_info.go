/*
Reverse Proxy as a Service

The presented API definition (formally called as RPaaS v2 API) is a superset of [Tsuru Service API] and the [legacy RPaaS][RPaaS v1 API] (aka RPaaS v1).  Source code: [github.com/tsuru/rpaas-operator](https://github.com/tsuru/rpaas-operator.git)  [Tsuru Service API]: https://app.swaggerhub.com/apis/tsuru/tsuru-service_api [RPaaS v1 API]: https://raw.githubusercontent.com/tsuru/rpaas/master/rpaas/api.py

API version: v2
Contact: tsuru@g.globo
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package autogenerated

import (
	"encoding/json"
)

// checks if the PodPortInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PodPortInfo{}

// PodPortInfo struct for PodPortInfo
type PodPortInfo struct {
	Name          *string  `json:"name,omitempty"`
	HostPort      *float32 `json:"hostPort,omitempty"`
	ContainerPort *float32 `json:"containerPort,omitempty"`
	Protocol      *string  `json:"protocol,omitempty"`
	HostIP        *string  `json:"hostIP,omitempty"`
}

// NewPodPortInfo instantiates a new PodPortInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPodPortInfo() *PodPortInfo {
	this := PodPortInfo{}
	return &this
}

// NewPodPortInfoWithDefaults instantiates a new PodPortInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPodPortInfoWithDefaults() *PodPortInfo {
	this := PodPortInfo{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PodPortInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PodPortInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PodPortInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PodPortInfo) SetName(v string) {
	o.Name = &v
}

// GetHostPort returns the HostPort field value if set, zero value otherwise.
func (o *PodPortInfo) GetHostPort() float32 {
	if o == nil || IsNil(o.HostPort) {
		var ret float32
		return ret
	}
	return *o.HostPort
}

// GetHostPortOk returns a tuple with the HostPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PodPortInfo) GetHostPortOk() (*float32, bool) {
	if o == nil || IsNil(o.HostPort) {
		return nil, false
	}
	return o.HostPort, true
}

// HasHostPort returns a boolean if a field has been set.
func (o *PodPortInfo) HasHostPort() bool {
	if o != nil && !IsNil(o.HostPort) {
		return true
	}

	return false
}

// SetHostPort gets a reference to the given float32 and assigns it to the HostPort field.
func (o *PodPortInfo) SetHostPort(v float32) {
	o.HostPort = &v
}

// GetContainerPort returns the ContainerPort field value if set, zero value otherwise.
func (o *PodPortInfo) GetContainerPort() float32 {
	if o == nil || IsNil(o.ContainerPort) {
		var ret float32
		return ret
	}
	return *o.ContainerPort
}

// GetContainerPortOk returns a tuple with the ContainerPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PodPortInfo) GetContainerPortOk() (*float32, bool) {
	if o == nil || IsNil(o.ContainerPort) {
		return nil, false
	}
	return o.ContainerPort, true
}

// HasContainerPort returns a boolean if a field has been set.
func (o *PodPortInfo) HasContainerPort() bool {
	if o != nil && !IsNil(o.ContainerPort) {
		return true
	}

	return false
}

// SetContainerPort gets a reference to the given float32 and assigns it to the ContainerPort field.
func (o *PodPortInfo) SetContainerPort(v float32) {
	o.ContainerPort = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *PodPortInfo) GetProtocol() string {
	if o == nil || IsNil(o.Protocol) {
		var ret string
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PodPortInfo) GetProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *PodPortInfo) HasProtocol() bool {
	if o != nil && !IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given string and assigns it to the Protocol field.
func (o *PodPortInfo) SetProtocol(v string) {
	o.Protocol = &v
}

// GetHostIP returns the HostIP field value if set, zero value otherwise.
func (o *PodPortInfo) GetHostIP() string {
	if o == nil || IsNil(o.HostIP) {
		var ret string
		return ret
	}
	return *o.HostIP
}

// GetHostIPOk returns a tuple with the HostIP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PodPortInfo) GetHostIPOk() (*string, bool) {
	if o == nil || IsNil(o.HostIP) {
		return nil, false
	}
	return o.HostIP, true
}

// HasHostIP returns a boolean if a field has been set.
func (o *PodPortInfo) HasHostIP() bool {
	if o != nil && !IsNil(o.HostIP) {
		return true
	}

	return false
}

// SetHostIP gets a reference to the given string and assigns it to the HostIP field.
func (o *PodPortInfo) SetHostIP(v string) {
	o.HostIP = &v
}

func (o PodPortInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PodPortInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.HostPort) {
		toSerialize["hostPort"] = o.HostPort
	}
	if !IsNil(o.ContainerPort) {
		toSerialize["containerPort"] = o.ContainerPort
	}
	if !IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if !IsNil(o.HostIP) {
		toSerialize["hostIP"] = o.HostIP
	}
	return toSerialize, nil
}

type NullablePodPortInfo struct {
	value *PodPortInfo
	isSet bool
}

func (v NullablePodPortInfo) Get() *PodPortInfo {
	return v.value
}

func (v *NullablePodPortInfo) Set(val *PodPortInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePodPortInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePodPortInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePodPortInfo(val *PodPortInfo) *NullablePodPortInfo {
	return &NullablePodPortInfo{value: val, isSet: true}
}

func (v NullablePodPortInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePodPortInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
