/*
Reverse Proxy as a Service

The presented API definition (formally called as RPaaS v2 API) is a superset of [Tsuru Service API] and the [legacy RPaaS][RPaaS v1 API] (aka RPaaS v1).  Source code: [github.com/tsuru/rpaas-operator](https://github.com/tsuru/rpaas-operator.git)  [Tsuru Service API]: https://app.swaggerhub.com/apis/tsuru/tsuru-service_api [RPaaS v1 API]: https://raw.githubusercontent.com/tsuru/rpaas/master/rpaas/api.py

API version: v2
Contact: tsuru@g.globo
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package autogenerated

import (
	"encoding/json"
)

// checks if the AdditionalInstanceInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdditionalInstanceInfo{}

// AdditionalInstanceInfo struct for AdditionalInstanceInfo
type AdditionalInstanceInfo struct {
	Label *string `json:"label,omitempty"`
	Value *string `json:"value,omitempty"`
}

// NewAdditionalInstanceInfo instantiates a new AdditionalInstanceInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdditionalInstanceInfo() *AdditionalInstanceInfo {
	this := AdditionalInstanceInfo{}
	return &this
}

// NewAdditionalInstanceInfoWithDefaults instantiates a new AdditionalInstanceInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdditionalInstanceInfoWithDefaults() *AdditionalInstanceInfo {
	this := AdditionalInstanceInfo{}
	return &this
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *AdditionalInstanceInfo) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalInstanceInfo) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *AdditionalInstanceInfo) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *AdditionalInstanceInfo) SetLabel(v string) {
	o.Label = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *AdditionalInstanceInfo) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalInstanceInfo) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *AdditionalInstanceInfo) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *AdditionalInstanceInfo) SetValue(v string) {
	o.Value = &v
}

func (o AdditionalInstanceInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdditionalInstanceInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableAdditionalInstanceInfo struct {
	value *AdditionalInstanceInfo
	isSet bool
}

func (v NullableAdditionalInstanceInfo) Get() *AdditionalInstanceInfo {
	return v.value
}

func (v *NullableAdditionalInstanceInfo) Set(val *AdditionalInstanceInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAdditionalInstanceInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAdditionalInstanceInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdditionalInstanceInfo(val *AdditionalInstanceInfo) *NullableAdditionalInstanceInfo {
	return &NullableAdditionalInstanceInfo{value: val, isSet: true}
}

func (v NullableAdditionalInstanceInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdditionalInstanceInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
