/*
Reverse Proxy as a Service

The presented API definition (formally called as RPaaS v2 API) is a superset of [Tsuru Service API] and the [legacy RPaaS][RPaaS v1 API] (aka RPaaS v1).  Source code: [github.com/tsuru/rpaas-operator](https://github.com/tsuru/rpaas-operator.git)  [Tsuru Service API]: https://app.swaggerhub.com/apis/tsuru/tsuru-service_api [RPaaS v1 API]: https://raw.githubusercontent.com/tsuru/rpaas/master/rpaas/api.py

API version: v2
Contact: tsuru@g.globo
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package autogenerated

import (
	"encoding/json"
)

// checks if the PlanSchemasServiceInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlanSchemasServiceInstance{}

// PlanSchemasServiceInstance struct for PlanSchemasServiceInstance
type PlanSchemasServiceInstance struct {
	Create *PlanSchemasServiceInstanceCreate `json:"create,omitempty"`
	Update *PlanSchemasServiceInstanceCreate `json:"update,omitempty"`
}

// NewPlanSchemasServiceInstance instantiates a new PlanSchemasServiceInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanSchemasServiceInstance() *PlanSchemasServiceInstance {
	this := PlanSchemasServiceInstance{}
	return &this
}

// NewPlanSchemasServiceInstanceWithDefaults instantiates a new PlanSchemasServiceInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanSchemasServiceInstanceWithDefaults() *PlanSchemasServiceInstance {
	this := PlanSchemasServiceInstance{}
	return &this
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *PlanSchemasServiceInstance) GetCreate() PlanSchemasServiceInstanceCreate {
	if o == nil || IsNil(o.Create) {
		var ret PlanSchemasServiceInstanceCreate
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanSchemasServiceInstance) GetCreateOk() (*PlanSchemasServiceInstanceCreate, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *PlanSchemasServiceInstance) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given PlanSchemasServiceInstanceCreate and assigns it to the Create field.
func (o *PlanSchemasServiceInstance) SetCreate(v PlanSchemasServiceInstanceCreate) {
	o.Create = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *PlanSchemasServiceInstance) GetUpdate() PlanSchemasServiceInstanceCreate {
	if o == nil || IsNil(o.Update) {
		var ret PlanSchemasServiceInstanceCreate
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanSchemasServiceInstance) GetUpdateOk() (*PlanSchemasServiceInstanceCreate, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *PlanSchemasServiceInstance) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given PlanSchemasServiceInstanceCreate and assigns it to the Update field.
func (o *PlanSchemasServiceInstance) SetUpdate(v PlanSchemasServiceInstanceCreate) {
	o.Update = &v
}

func (o PlanSchemasServiceInstance) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlanSchemasServiceInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	return toSerialize, nil
}

type NullablePlanSchemasServiceInstance struct {
	value *PlanSchemasServiceInstance
	isSet bool
}

func (v NullablePlanSchemasServiceInstance) Get() *PlanSchemasServiceInstance {
	return v.value
}

func (v *NullablePlanSchemasServiceInstance) Set(val *PlanSchemasServiceInstance) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanSchemasServiceInstance) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanSchemasServiceInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanSchemasServiceInstance(val *PlanSchemasServiceInstance) *NullablePlanSchemasServiceInstance {
	return &NullablePlanSchemasServiceInstance{value: val, isSet: true}
}

func (v NullablePlanSchemasServiceInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanSchemasServiceInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
