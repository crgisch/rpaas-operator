/*
Reverse Proxy as a Service

The presented API definition (formally called as RPaaS v2 API) is a superset of [Tsuru Service API] and the [legacy RPaaS][RPaaS v1 API] (aka RPaaS v1).  Source code: [github.com/tsuru/rpaas-operator](https://github.com/tsuru/rpaas-operator.git)  [Tsuru Service API]: https://app.swaggerhub.com/apis/tsuru/tsuru-service_api [RPaaS v1 API]: https://raw.githubusercontent.com/tsuru/rpaas/master/rpaas/api.py

API version: v2
Contact: tsuru@g.globo
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package autogenerated

import (
	"encoding/json"
)

// checks if the InstanceInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceInfo{}

// InstanceInfo struct for InstanceInfo
type InstanceInfo struct {
	Name         *string           `json:"name,omitempty"`
	Description  *string           `json:"description,omitempty"`
	Team         *string           `json:"team,omitempty"`
	Tags         []string          `json:"tags,omitempty"`
	Plan         *string           `json:"plan,omitempty"`
	Flavors      []string          `json:"flavors,omitempty"`
	Replicas     *float32          `json:"replicas,omitempty"`
	Autoscale    *Autoscale        `json:"autoscale,omitempty"`
	Pods         []PodInfo         `json:"pods,omitempty"`
	Certificates []CertificateInfo `json:"certificates,omitempty"`
	Blocks       []Block           `json:"blocks,omitempty"`
	Routes       []Route           `json:"routes,omitempty"`
}

// NewInstanceInfo instantiates a new InstanceInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceInfo() *InstanceInfo {
	this := InstanceInfo{}
	return &this
}

// NewInstanceInfoWithDefaults instantiates a new InstanceInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceInfoWithDefaults() *InstanceInfo {
	this := InstanceInfo{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InstanceInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *InstanceInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InstanceInfo) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *InstanceInfo) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceInfo) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *InstanceInfo) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *InstanceInfo) SetDescription(v string) {
	o.Description = &v
}

// GetTeam returns the Team field value if set, zero value otherwise.
func (o *InstanceInfo) GetTeam() string {
	if o == nil || IsNil(o.Team) {
		var ret string
		return ret
	}
	return *o.Team
}

// GetTeamOk returns a tuple with the Team field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceInfo) GetTeamOk() (*string, bool) {
	if o == nil || IsNil(o.Team) {
		return nil, false
	}
	return o.Team, true
}

// HasTeam returns a boolean if a field has been set.
func (o *InstanceInfo) HasTeam() bool {
	if o != nil && !IsNil(o.Team) {
		return true
	}

	return false
}

// SetTeam gets a reference to the given string and assigns it to the Team field.
func (o *InstanceInfo) SetTeam(v string) {
	o.Team = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *InstanceInfo) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceInfo) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *InstanceInfo) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *InstanceInfo) SetTags(v []string) {
	o.Tags = v
}

// GetPlan returns the Plan field value if set, zero value otherwise.
func (o *InstanceInfo) GetPlan() string {
	if o == nil || IsNil(o.Plan) {
		var ret string
		return ret
	}
	return *o.Plan
}

// GetPlanOk returns a tuple with the Plan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceInfo) GetPlanOk() (*string, bool) {
	if o == nil || IsNil(o.Plan) {
		return nil, false
	}
	return o.Plan, true
}

// HasPlan returns a boolean if a field has been set.
func (o *InstanceInfo) HasPlan() bool {
	if o != nil && !IsNil(o.Plan) {
		return true
	}

	return false
}

// SetPlan gets a reference to the given string and assigns it to the Plan field.
func (o *InstanceInfo) SetPlan(v string) {
	o.Plan = &v
}

// GetFlavors returns the Flavors field value if set, zero value otherwise.
func (o *InstanceInfo) GetFlavors() []string {
	if o == nil || IsNil(o.Flavors) {
		var ret []string
		return ret
	}
	return o.Flavors
}

// GetFlavorsOk returns a tuple with the Flavors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceInfo) GetFlavorsOk() ([]string, bool) {
	if o == nil || IsNil(o.Flavors) {
		return nil, false
	}
	return o.Flavors, true
}

// HasFlavors returns a boolean if a field has been set.
func (o *InstanceInfo) HasFlavors() bool {
	if o != nil && !IsNil(o.Flavors) {
		return true
	}

	return false
}

// SetFlavors gets a reference to the given []string and assigns it to the Flavors field.
func (o *InstanceInfo) SetFlavors(v []string) {
	o.Flavors = v
}

// GetReplicas returns the Replicas field value if set, zero value otherwise.
func (o *InstanceInfo) GetReplicas() float32 {
	if o == nil || IsNil(o.Replicas) {
		var ret float32
		return ret
	}
	return *o.Replicas
}

// GetReplicasOk returns a tuple with the Replicas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceInfo) GetReplicasOk() (*float32, bool) {
	if o == nil || IsNil(o.Replicas) {
		return nil, false
	}
	return o.Replicas, true
}

// HasReplicas returns a boolean if a field has been set.
func (o *InstanceInfo) HasReplicas() bool {
	if o != nil && !IsNil(o.Replicas) {
		return true
	}

	return false
}

// SetReplicas gets a reference to the given float32 and assigns it to the Replicas field.
func (o *InstanceInfo) SetReplicas(v float32) {
	o.Replicas = &v
}

// GetAutoscale returns the Autoscale field value if set, zero value otherwise.
func (o *InstanceInfo) GetAutoscale() Autoscale {
	if o == nil || IsNil(o.Autoscale) {
		var ret Autoscale
		return ret
	}
	return *o.Autoscale
}

// GetAutoscaleOk returns a tuple with the Autoscale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceInfo) GetAutoscaleOk() (*Autoscale, bool) {
	if o == nil || IsNil(o.Autoscale) {
		return nil, false
	}
	return o.Autoscale, true
}

// HasAutoscale returns a boolean if a field has been set.
func (o *InstanceInfo) HasAutoscale() bool {
	if o != nil && !IsNil(o.Autoscale) {
		return true
	}

	return false
}

// SetAutoscale gets a reference to the given Autoscale and assigns it to the Autoscale field.
func (o *InstanceInfo) SetAutoscale(v Autoscale) {
	o.Autoscale = &v
}

// GetPods returns the Pods field value if set, zero value otherwise.
func (o *InstanceInfo) GetPods() []PodInfo {
	if o == nil || IsNil(o.Pods) {
		var ret []PodInfo
		return ret
	}
	return o.Pods
}

// GetPodsOk returns a tuple with the Pods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceInfo) GetPodsOk() ([]PodInfo, bool) {
	if o == nil || IsNil(o.Pods) {
		return nil, false
	}
	return o.Pods, true
}

// HasPods returns a boolean if a field has been set.
func (o *InstanceInfo) HasPods() bool {
	if o != nil && !IsNil(o.Pods) {
		return true
	}

	return false
}

// SetPods gets a reference to the given []PodInfo and assigns it to the Pods field.
func (o *InstanceInfo) SetPods(v []PodInfo) {
	o.Pods = v
}

// GetCertificates returns the Certificates field value if set, zero value otherwise.
func (o *InstanceInfo) GetCertificates() []CertificateInfo {
	if o == nil || IsNil(o.Certificates) {
		var ret []CertificateInfo
		return ret
	}
	return o.Certificates
}

// GetCertificatesOk returns a tuple with the Certificates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceInfo) GetCertificatesOk() ([]CertificateInfo, bool) {
	if o == nil || IsNil(o.Certificates) {
		return nil, false
	}
	return o.Certificates, true
}

// HasCertificates returns a boolean if a field has been set.
func (o *InstanceInfo) HasCertificates() bool {
	if o != nil && !IsNil(o.Certificates) {
		return true
	}

	return false
}

// SetCertificates gets a reference to the given []CertificateInfo and assigns it to the Certificates field.
func (o *InstanceInfo) SetCertificates(v []CertificateInfo) {
	o.Certificates = v
}

// GetBlocks returns the Blocks field value if set, zero value otherwise.
func (o *InstanceInfo) GetBlocks() []Block {
	if o == nil || IsNil(o.Blocks) {
		var ret []Block
		return ret
	}
	return o.Blocks
}

// GetBlocksOk returns a tuple with the Blocks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceInfo) GetBlocksOk() ([]Block, bool) {
	if o == nil || IsNil(o.Blocks) {
		return nil, false
	}
	return o.Blocks, true
}

// HasBlocks returns a boolean if a field has been set.
func (o *InstanceInfo) HasBlocks() bool {
	if o != nil && !IsNil(o.Blocks) {
		return true
	}

	return false
}

// SetBlocks gets a reference to the given []Block and assigns it to the Blocks field.
func (o *InstanceInfo) SetBlocks(v []Block) {
	o.Blocks = v
}

// GetRoutes returns the Routes field value if set, zero value otherwise.
func (o *InstanceInfo) GetRoutes() []Route {
	if o == nil || IsNil(o.Routes) {
		var ret []Route
		return ret
	}
	return o.Routes
}

// GetRoutesOk returns a tuple with the Routes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceInfo) GetRoutesOk() ([]Route, bool) {
	if o == nil || IsNil(o.Routes) {
		return nil, false
	}
	return o.Routes, true
}

// HasRoutes returns a boolean if a field has been set.
func (o *InstanceInfo) HasRoutes() bool {
	if o != nil && !IsNil(o.Routes) {
		return true
	}

	return false
}

// SetRoutes gets a reference to the given []Route and assigns it to the Routes field.
func (o *InstanceInfo) SetRoutes(v []Route) {
	o.Routes = v
}

func (o InstanceInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Team) {
		toSerialize["team"] = o.Team
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Plan) {
		toSerialize["plan"] = o.Plan
	}
	if !IsNil(o.Flavors) {
		toSerialize["flavors"] = o.Flavors
	}
	if !IsNil(o.Replicas) {
		toSerialize["replicas"] = o.Replicas
	}
	if !IsNil(o.Autoscale) {
		toSerialize["autoscale"] = o.Autoscale
	}
	if !IsNil(o.Pods) {
		toSerialize["pods"] = o.Pods
	}
	if !IsNil(o.Certificates) {
		toSerialize["certificates"] = o.Certificates
	}
	if !IsNil(o.Blocks) {
		toSerialize["blocks"] = o.Blocks
	}
	if !IsNil(o.Routes) {
		toSerialize["routes"] = o.Routes
	}
	return toSerialize, nil
}

type NullableInstanceInfo struct {
	value *InstanceInfo
	isSet bool
}

func (v NullableInstanceInfo) Get() *InstanceInfo {
	return v.value
}

func (v *NullableInstanceInfo) Set(val *InstanceInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceInfo(val *InstanceInfo) *NullableInstanceInfo {
	return &NullableInstanceInfo{value: val, isSet: true}
}

func (v NullableInstanceInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
